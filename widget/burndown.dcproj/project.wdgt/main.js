// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

var $break = { };

Array.implement({
  
  detect: function(iterator, context) {
    var result, iterator = iterator.bind(context);
    try {
      this.each(function(value, index) {
        if (iterator(value, index)) {
          result = value;
          throw $break;
        }
      });
    } catch(e) {
      if(e != $break) throw e;
    }
    return result;
  }
});

String.prototype.abbreviate = function(offset, maxWidth) {
  if(maxWidth < 4) {
    throw new Error('Minimum abbreviation width is 4');
  }
  if(this.length <= maxWidth) {
    return this;
  }
  if(offset > this.length) {
    offset = this.length;
  }
  if((this.length - offset) < (maxWidth - 3)) {
    offset = this.length - (maxWidth - 3);
  }
  if(offset <= 4) {
    return this.substring(0, maxWidth - 3) + '...';
  }
  if(maxWidth < 7) {
    throw new Error('Minimum abbreviation width with offset is 7');
  }
  if((offset + (maxWidth - 3)) < thie.length) {
    return '...' + this.abbreviate(this.substring(offset), 0, maxWidth - 3);
  }
  return '...' + this.substring(this.length - (maxWidth - 3));
}

String.prototype.toDate = function() { return new Date(this.replace(/-/g, '/')) }


Request.JSON.implement({

  success: function(text){
    try {
      this.response.json = JSON.decode(text, this.options.secure);
    } catch (ex) {}
    this.onSuccess(this.response.json, text, this.getHeader('Location'));
  },

  onFailure: function(){
    var json = null;
    try {    
      json = JSON.decode(this.xhr.responseText, this.options.secure);
    } catch (ex) {}
    this.fireEvent('onComplete').fireEvent('onFailure', [this.xhr, json]);
  }
});

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
window.addEvent('domready', load);

function load() {
  setupParts();
  chart = new Chart({ canvas: chart, width: chart.width, height: chart.height });
  document.addEvent('iteration:changed', function(iteration_id) {
    chart.load('http://localhost:3000/iterations/' + iteration_id + '/chart_data');
  });
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
